# -*- coding: utf-8 -*-
"""
Created on Mon Nov 14 19:55:03 2022

@author: ashru
"""
import math
from scipy.optimize import fsolve
from PIL import Image#, ImageDraw
import numpy as np
from pathlib import Path

#Change data folder to wherever on your 
data_folder = "C:/Users/ashru/Desktop"

#define a function for printing the matrix
def printArea():
    for i in range(len(area)):
        for j in range (len(area[0])):
            print(area[i][j], end = " ")
            print("\n")
        print("\n")
"""    
def getAreaLayout():
    try:
        #ask for the dimensions of the area
        areaWidth = int(input('Please input the width of the area \n'))
        areaHeight = int(input('Please input the height of the area \n'))
        print("\n")
    except:
        print("Something you entered was not an integer. Please try again. \n")
        areaWidth, areaHeight = getAreaLayout()
    if(areaWidth < 1):
        print("Area width must be greater than zero. Please try again. \n")
        areaWidth, areaHeight = getAreaLayout()
    if(areaHeight < 1):
        print("Area height must be greater than zero. Please try again. \n")
        areaWidth, areaHeight = getAreaLayout()
    return areaWidth, areaHeight

def getAreaDist():
    try:
        dist = float(input("Please input the distance between each measuring point in the area (m) \n"))
    except:
        print("The distance must be a float. Please try again. \n")
        dist = getAreaDist()
    if(dist<=0):
        print("The distance must be greater than zero. Please try again. \n")
        dist = getAreaDist()
    return dist


#define a function for getting info for the time information
def getTime():
    try:
        #ask for time peroid and step
        timePeriod = float(input("what is the time period you would like to measure over (s) \n"))
        timeStep = float(input("what is the time step you would like to use (s) \n"))
    except:
        #if invalid input, send error message and re-call function
        print("Something you entered was not a float. Please try again.\n")
        timePeriod, timeStep = getTime()
    #if invalid input, send error message and re-call function
    if(timePeriod<=0):
        print("You cannot have a time period less than or equal to 0. Please try again. \n")
        timePeriod, timeStep = getTime()
    elif(timePeriod<timeStep):
        print("you cannot have a time period less than your time step. Please try again. \n")
        timePeriod, timeStep = getTime()
    elif(timeStep<=0):
        print("You cannot have a time step less than or equal to 0. Please try again. \n")
        timePeriod, timeStep = getTime()
    return timePeriod, timeStep

def getFrequency():
    try:
       f = float(input("What is the frequency of the sound wave? \n")) 
    except:
        print("You did not enter a float. Please try again. \n")
        f =getFrequency()
    if(f<=0):
        print("Frequency must be over 0. Please try again. \n")
        f = getFrequency()
    return f

def getXY():
    try:
        xEM = float(input("What would you like the slope of x to equal (in terms of t)? \n"))
        xEB = float(input("What would you like the starting value of x to equal? \n"))
        yEM = float(input("What would you like the slope of y to equal (in terms of t)? \n"))
        yEB = float(input("What would you like the starting value of y to equal? \n"))
    except:
        print("You must enter a float. Please try again. \n")
        xEM, xEB,yEM,yEB = getXY()
    return xEM, xEB, yEM, yEB
"""

SPEEDOFSOUND = 343.2

#define variables for x measured, y measured 
xM = int()
yM = int()

#define a variable for time emitted, time measured, and retarded time
tE = float()
tMList = []
tR = float() 
tM= 0
pressure = []


timePeriod, timeStep = .5,.025
f = 100
stepNumber = math.floor(timePeriod/timeStep)

#create an empty 2d matrix with given dimensions 

areaWidth, areaHeight = 800, 600
area = [0] *(stepNumber)
#areaBW = [0] *(stepNumber+1)
for i in range(stepNumber):
    area[i] = [0] * areaHeight
    #areaBW[i] = [0] * areaHeight
    for j in range(areaHeight):
        area[i][j] = [0] * areaWidth
        #areaBW[i][j] = [0] * areaWidth
        
areaBW = np.zeros((areaHeight,areaWidth))



dist = .1
xEM, xEB, yEM, yEB = 0, 0, 0, -0
yEM, yEB= yEM * -1, yEB * -1

totalWidthDistHalf = dist*areaWidth/2
totalHeightDistHalf = dist*areaHeight/2

w= 2*math.pi*f


for j in range(len(area[0])):
    yM = j * dist - totalHeightDistHalf
    for k in range(len(area[0][0])):  
        xM = k * dist - totalWidthDistHalf
        for i in range(stepNumber):
            #set xM and yM based on current place measured * dist
            tM = (i+1) * timeStep 
            tMList.append(tM)
            def equations(p):
                x, y = p
                return (x+y-tM, x-((((xEM*y+xEB)-xM)**2+((yEM*y+yEB)-yM)**2)**.5)/340,)
                #return (x+y-tM, x-((((xEM*y+xEB)-xM)**2+((yEM*y+yEB)-yM)**2)**.5)/340)
            tR, tE=  fsolve(equations, ((tM/2), (tM/2)))
            if (tE>=0 and tE<= tM):
                if(np.isreal(tR)):
                    
                    """
                    #x = setX(tE)
                    #y = setY(tE)
                    #create a variable for the farthest 
                    
                    #set r based on formula for x=t, y=t, measured fro (0,0)
                    r = ((xEM*tE+xEB-xM)**2+(yEM*tE+xEB-yM)**2)**.5
                    if(r==0):
                        area[i][j][k] = (math.sin(w*tE))
                    else:
                        area[i][j][k] = (math.sin(w*tE))/math.log(r)
                    """
                    area[i][j][k] = (math.sin(w*tE))
                    
print('equations done')
"""
emissions = []
for i in range(round(stepNumber*f*timeStep)):
    emissionTime = i*timeStep
    emissionX = round((xEM*emissionTime+xEB)/dist)
    emissionY = round((yEM*emissionTime+yEB)/dist)
    emissions.append([emissionTime,emissionX,emissionY])
print(emissions)
"""

imgData = str(timePeriod) + ',' + str(timeStep) + ',' + str(f) + ',' + str(areaHeight) + ',' + str(areaWidth) + ',' + str(dist) + ',' +  str(xEM) + ',' + str(xEB) + ',' + str(yEM) + ',' + str(yEB)
dataFolder = Path("C:/Users/ashru/Desktop/"+imgData)
p = dataFolder.mkdir(parents=True, exist_ok=True)
#yN = input("Would you like to make any of the time slots into an image (enter y for yes).")
#if(yN=='y'):im
#step = int(input("Which step would you like to use (start at 1)"))-1
for k in range(len(area)):
    for i in range(len(area[k])):
        for j in range(len(area[k][i])):
            bV = area[k][i][j]
            if(bV>1):
                bv=1
            elif(bV<-1):
                bV = -1
            areaBW[i][j] = int(round(127.5*(bV+1)))
    areaBW = areaBW.astype('i')
    newImg = Image.fromarray(np.uint8(areaBW))

    name = "C:/Users/ashru/Desktop/"+imgData+ '/'+ imgData + ',' + str(k) +".png"
    #name1 = "C:/Users/ashru/Desktop/"+imgData+ '/Circle'+ imgData + ',' + str(k) +".png"
    newImg.save(name)
    """
    newImg1 = ImageDraw.Draw(Image.open(name))
    l = 0
    for l in range(len(emissions)):
        if(emissions[l][0]<=(k+1)*timeStep):
            print(l,i+k-l)
            emissionR = SPEEDOFSOUND *(emissions[l][0])-l*timeStep
            newImg1.ellipse([(10,10),(50,50)],fill=None,outline = 'cyan', width = 3)

            #newImg1.ellipse([(emissions[l][1]-round(emissionR/(dist*(2)**.5)),emissions[l][2]-round(emissionR/(dist*(2)**.5))),(emissions[l][1]+round(emissionR/(dist*(2)**.5)),emissions[l][2]+round(emissionR/(dist*(2)**.5)))],fill=None,outline = 'red', width = 2)
        else:
            break
    newImg.save(name1)
    """
print('done')
